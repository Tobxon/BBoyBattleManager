//--------------------------------------------------------------------------------------------------
/**
 * \brief Module Interface Unit for utility type traits analog to <type_trait> from stl, but more
 *        custom to recuring uses.
 *
 */


//--------------------------------------------------------------------------------------------------
//------ GLOBAL MODULE FRAGMENT                                                               ------
//--------------------------------------------------------------------------------------------------
module;


//--------------------------------------------------------------------------------------------------
//------ MODULE CONTENT                                                                       ------
//--------------------------------------------------------------------------------------------------
export module utility:type_traits;


//--------------------------------------------------------------------------------------------------
//------ Dependencies                                                                         ------
//--------------------------------------------------------------------------------------------------

//std
import <type_traits>;
import <ranges>;


//--------------------------------------------------------------------------------------------------
//------ Declarations                                                                         ------
//--------------------------------------------------------------------------------------------------
export namespace utility::type_traits
{



template< typename T >
concept IsUnsignedint = std::is_integral_v<T> && std::is_unsigned_v<T>;

template< typename T >
concept isInputRangeOf = std::ranges::input_range< T > && std::convertible_to< std::ranges::range_value_t<T>, T >;



}